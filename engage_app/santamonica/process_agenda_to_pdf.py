import os
import pytz
import logging
from datetime import datetime
from PyPDF2 import PdfFileWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate as SDT, Paragraph as P, Spacer as S, PageBreak as PB
from reportlab.lib.styles import ParagraphStyle as PS
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from reportlab.pdfbase import pdfmetrics
from engage_scraper.scraper_logics.santamonica_scraper_models import Message, AgendaItem
from .utils import send_mail
logging.basicConfig()
log = logging.getLogger(__name__)
black = "#000000"
white = "#FFFFFF"
green = "#27ae60"
red = "#c0392b"
lightgray = "rgba(100,100,100,0.20)"
LI = 0.25 * inch
ps_title = PS("title", fontSize=14, spaceAfter=LI, leading=16)
ps_email = PS("Email", fontSize=10, leftIndent=LI, textColor=black)
ps_name = PS("name", fontSize=10, leftIndent=LI,
             spaceBefore=10, textColor=black)
ps_comment = PS("Comment", fontSize=10, leftIndent=LI, textColor=black)
ps_id = PS("id", fontSize=10)
ps_pro = PS('pro', fontSize=10, backColor=green, textColor=white,
            spaceBefore=7, borderPadding=(5, 5, 5, 5))
ps_con = PS(
    'con', fontSize=10, backColor=red, textColor=white, spaceBefore=7, borderPadding=(5, 5, 5, 5))
ps_need_info = PS(
    'need_info', fontSize=10, backColor=black, textColor=white, spaceBefore=7, borderPadding=(5, 5, 5, 5))
ps_no_comments = PS(
    'no_comments', fontSize=10, backColor=lightgray, textColor=black, spaceBefore=7, borderPadding=(5, 5, 5, 5), borderColor=white, borderWidth=2, borderRadius=5)
cover_page_title = PS(
    "cover", fontSize=20, leading=24, alignment=TA_CENTER, textColor=black)
cover_page_subtitle = PS(
    "cover", fontSize=16, leading=19, spaceBefore=15, alignment=TA_CENTER, textColor=black)
cover_page_subtitle_leading = PS(
    "cover", fontSize=12, leading=15, spaceBefore=50, alignment=TA_CENTER, textColor=black)


def paragraphize_comments(comments, contents):
    for comment in comments:
        if comment.authcode is not None:
            continue
        if comment.email is not None:
            name = "Name: " + comment.first_name + " " + comment.last_name
            email = "Email: <a href='mailto:" + \
                str(comment.email) + "'><u>" + comment.email + \
                f"</u></a>"
            comment = "Comment: " + comment.content
        elif comment.user_id is not None:
            user = EngageUser.objects.get(id=comment.user_id)
            name = "Name: " + user.first_name + " " + user.last_name
            email = "Email: <a href='mailto:" + \
                str(user.email) + "'><u>" + user.email + "</u></a>"
            comment = "Comment: " + comment.content
        else:
            continue
        contents.append(P(name, ps_name))
        contents.append(P(email, ps_email))
        contents.append(P(comment, ps_comment))
    return contents



def write_pdf_for_agenda(committee, agenda, items, session):
    static_root = os.path.join("/", "pdfs")
    tz = pytz.timezone(committee.location_tz)
    datetime_local = datetime.fromtimestamp(
        agenda.cutoff_time).astimezone(tz=tz)
    datetime_meeting_local = datetime.fromtimestamp(
        agenda.meeting_time).astimezone(tz=tz)
    if not os.path.exists(static_root):
        os.mkdir(static_root)
    file_name = "{}_Meeting_{}.pdf".format(
        "_".join(committee.name.split(" ")), agenda.meeting_id)
    file_path = os.path.join(static_root, file_name)
    try:
        doc = SDT(file_path,
                  pagesize=letter,
                  rightMargin=72, leftMargin=72,
                  topMargin=72, bottomMargin=18)
        contents = []
        contents.append(S(0, 2*LI))
        contents.append(
            P("Comment Submissions for {} Agenda {}".format(committee.name, agenda.meeting_id), cover_page_title))
        subtitle_date = datetime_meeting_local.strftime('%m/%d/%Y')
        contents.append(P("made until cutoff on {}".format(
            subtitle_date), cover_page_subtitle))
        contents.append(P(
            "Report generated by <a href='http://engage.town/'><u>Engage.town</u></a>", cover_page_subtitle_leading))

        contents.append(PB())
        for agenda_item in items:
            contents.append(P(agenda_item.title, ps_title))
            contents.append(
                P("ID: " + agenda_item.agenda_item_id, ps_id))
            messages = session.query(Message).filter(
                Message.agenda_item_id == agenda_item.id)
            pro_comments_on_agenda_item = messages.filter(
                Message.pro == 0).all()
            con_comments_on_agenda_item = messages.filter(
                Message.pro == 1).all()
            need_info_comments_on_agenda_item = messages.filter(
                Message.pro == 2).all()
            if pro_comments_on_agenda_item or con_comments_on_agenda_item or need_info_comments_on_agenda_item:
                contents.append(
                    P("Comments agreeing with the recommendations:", ps_pro))
                contents.append(S(1, LI))
                if len(pro_comments_on_agenda_item) > 0:
                    paragraphize_comments(
                        pro_comments_on_agenda_item, contents)
                else:
                    contents.append(
                        P("No comments agreeing with recommendations on this item.", ps_no_comments))
                contents.append(S(1, 2*LI))
                contents.append(
                    P("Comments disagreeing with the recommendations:", ps_con))
                contents.append(S(1, LI))
                if len(con_comments_on_agenda_item) > 0:
                    paragraphize_comments(
                        con_comments_on_agenda_item, contents)
                else:
                    contents.append(
                        P("No comments disagreeing with recommendations on this item.", ps_no_comments))
                contents.append(S(1, 2 * LI))
                contents.append(
                    P("Need more information comments", ps_need_info))
                contents.append(S(1, LI))
                if len(need_info_comments_on_agenda_item) > 0:
                    paragraphize_comments(
                        need_info_comments_on_agenda_item, contents)
                else:
                    contents.append(
                        P("No needs more information comments on this item.", ps_no_comments))
            # exclude section without comments
            else:
                contents.append(
                    P("No comments agreeing or disagreeing with this agenda item were recorded.", ps_no_comments))
            contents.append(S(1, 2 * LI))
            contents.append(PB())
        doc.build(contents)
        email_body = """<html>
            <head>
                <style>
                    body {
                        font-family: sans-serif;
                        font-size: 12px;
                        color: #000;
                    }
                </style>
            </head>
            <body>
                <p>Greetings from Engage</p>
                <p>Please find attached the latest report for the upcoming Council Meeting.</p>
                <p>Thank you,</p>
                <p>Your Engage team</p>
                <hr>
                <p><i>This is an automated message, for any questions please contact <a hrek=mailto:contact@engage.town?subject=Feedback%20Agenda%20Comments%20Report>contact@engage.town</a></i></p>
            </body
        </html>
        """
        subject = "{} Meeting {} - Agenda Recommendations, Comment Submissions for {}".format(committee.name, agenda.meeting_id, subtitle_date)
        send_mail(committee, subject, email_body, file_name, file_path)
        agenda.processed = True
        agenda.pdf_location = file_path
        session.commit()
    except Exception as exc:
        log.error(exc)
